/*
Deployment script for StudentRegistrationDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StudentRegistrationDB"
:setvar DefaultFilePrefix "StudentRegistrationDB"
:setvar DefaultDataPath "C:\Users\achow\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\achow\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Customers]...';


GO
CREATE TABLE [dbo].[Customers] (
    [CustomerId]     TINYINT       IDENTITY (1, 1) NOT NULL,
    [FirstName]      NCHAR (30)    NOT NULL,
    [LastName]       NCHAR (30)    NULL,
    [PhoneNumber]    NCHAR (15)    NULL,
    [BillingAddress] NCHAR (50)    NULL,
    [DOB]            DATETIME2 (7) NULL,
    CONSTRAINT [PK_Customers] PRIMARY KEY CLUSTERED ([CustomerId] ASC)
);


GO
PRINT N'Creating [dbo].[Employees]...';


GO
CREATE TABLE [dbo].[Employees] (
    [EmployeeId]   TINYINT    IDENTITY (1, 1) NOT NULL,
    [EmployeeName] NCHAR (50) NULL,
    [Role]         NCHAR (15) NULL,
    CONSTRAINT [PK_Employees] PRIMARY KEY CLUSTERED ([EmployeeId] ASC)
);


GO
PRINT N'Creating [dbo].[Reservations]...';


GO
CREATE TABLE [dbo].[Reservations] (
    [ReservationId] TINYINT   IDENTITY (1, 1) NOT NULL,
    [CheckInDate]   DATE      NOT NULL,
    [CheckOutDate]  DATE      NOT NULL,
    [FoodService]   NCHAR (1) NULL,
    [RoomId]        TINYINT   NOT NULL,
    [EmployeeId]    TINYINT   NOT NULL,
    [CustomerId]    TINYINT   NOT NULL,
    CONSTRAINT [PK_ReservationId] PRIMARY KEY CLUSTERED ([ReservationId] ASC)
);


GO
PRINT N'Creating [dbo].[Rooms]...';


GO
CREATE TABLE [dbo].[Rooms] (
    [RoomId]     TINYINT    IDENTITY (1, 1) NOT NULL,
    [RoomStatus] NCHAR (10) NOT NULL,
    [RoomTypeId] TINYINT    NOT NULL,
    CONSTRAINT [PK_Rooms] PRIMARY KEY CLUSTERED ([RoomId] ASC)
);


GO
PRINT N'Creating [dbo].[RoomType]...';


GO
CREATE TABLE [dbo].[RoomType] (
    [RoomTypeId]        TINYINT    IDENTITY (1, 1) NOT NULL,
    [Name]              NCHAR (20) NOT NULL,
    [Price]             INT        NOT NULL,
    [NumberOfBeds]      TINYINT    NULL,
    [BedSize]           NCHAR (10) NULL,
    [NumberOfOccupants] TINYINT    NULL,
    CONSTRAINT [PK_RoomTypeId] PRIMARY KEY CLUSTERED ([RoomTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[FK_ReservationId_Rooms_RoomId]...';


GO
ALTER TABLE [dbo].[Reservations]
    ADD CONSTRAINT [FK_ReservationId_Rooms_RoomId] FOREIGN KEY ([RoomId]) REFERENCES [dbo].[Rooms] ([RoomId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ReservationId_Employees_EmployeeId]...';


GO
ALTER TABLE [dbo].[Reservations]
    ADD CONSTRAINT [FK_ReservationId_Employees_EmployeeId] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employees] ([EmployeeId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_ReservationId_Customers_CustomerId]...';


GO
ALTER TABLE [dbo].[Reservations]
    ADD CONSTRAINT [FK_ReservationId_Customers_CustomerId] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([CustomerId]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_RoomId_RoomType_RoomTypeId]...';


GO
ALTER TABLE [dbo].[Rooms]
    ADD CONSTRAINT [FK_RoomId_RoomType_RoomTypeId] FOREIGN KEY ([RoomTypeId]) REFERENCES [dbo].[RoomType] ([RoomTypeId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '4bc691d1-66f5-47ce-82d5-09e545a782fd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('4bc691d1-66f5-47ce-82d5-09e545a782fd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e37a50ee-bde1-44d1-a478-1c32c491c16c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e37a50ee-bde1-44d1-a478-1c32c491c16c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '33633b8b-9834-4b96-9159-06fd41b06cdd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('33633b8b-9834-4b96-9159-06fd41b06cdd')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/



SET IDENTITY_INSERT [dbo].[Employees] ON
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [Role]) VALUES (1, N'Isaias', N'Staff')
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [Role]) VALUES (2, N'Sphurti', N'Administrator')
INSERT INTO [dbo].[Employees] ([EmployeeId], [EmployeeName], [Role]) VALUES (3, N'Abhisek', N'Administrator')
SET IDENTITY_INSERT [dbo].[Employees] OFF
GO



SET IDENTITY_INSERT [dbo].[Customers] ON
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (1, N'Vaclav', N'Chirm', N'1044516087', N'647 Algoma Trail', '11/25/1989')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (2, N'Weber', N'Carrol', N'2793403172', N'778 Barby Park', '4/8/1987')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (3, N'Reube', N'Eilert', N'4561157945', N'73 Bunting Drive', '7/14/1990')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (4, N'Etty', N'Kirley', N'3802551109', N'5251 Manitowish Circle', '11/30/1996')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (5, N'Delila', N'Huckel', N'6563842375', N'8630 Vidon Parkway', '5/20/1988')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (6, N'Cass', N'Aronovich', N'7236792336', N'925 School Park', '3/4/1995')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (7, N'Erek', N'De Simone', N'9652807448', N'3373 Steensland Drive', '9/30/1994')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (8, N'Loren', N'Hilhouse', N'4153877218', N'9 Chive Point', '2/28/1999')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (9, N'Wyndham', N'Brydon', N'1408814027', N'16686 Dayton Point', '7/1/1991')
insert into [dbo].[Customers] ([CustomerId], [FirstName], [LastName], [PhoneNumber], [BillingAddress], [DOB]) values (10, N'Yulma', N'Wayland', N'5302859334', N'36 Pepper Wood Plaza', '12/29/1980')
SET IDENTITY_INSERT [dbo].[Customers] OFF
GO

SET IDENTITY_INSERT [dbo].[RoomType] ON
insert into [dbo].[RoomType] ([RoomTypeId], [Name], [Price], [NumberOfBeds], [BedSize],[NumberOfOccupants]) values (1, N'Economic', 45, 1, N'Queen',1)
insert into [dbo].[RoomType] ([RoomTypeId], [Name], [Price], [NumberOfBeds], [BedSize],[NumberOfOccupants]) values (2, N'Normal', 75, 2, N'King',2)
insert into [dbo].[RoomType] ([RoomTypeId], [Name], [Price], [NumberOfBeds], [BedSize],[NumberOfOccupants]) values (3, N'Deluxe', 125, 3, N'King',4)
SET IDENTITY_INSERT [dbo].[RoomType] OFF
GO


SET IDENTITY_INSERT [dbo].[Rooms] ON
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (1, N'Available', 1)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (2, N'Occupied', 2)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (3, N'Occupied', 1)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (4, N'Available', 3)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (5, N'Available', 3)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (6, N'Occupied', 2)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (7, N'Available', 2)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (8, N'Available', 1)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (9, N'Occupied', 1)
insert into [dbo].[Rooms] (RoomId, RoomStatus, RoomTypeId) values (10, N'Occupied', 1)
SET IDENTITY_INSERT [dbo].[Rooms] OFF
GO

SET IDENTITY_INSERT [dbo].[Reservations] ON
insert into [dbo].[Reservations] (ReservationId, CheckInDate, CheckOutDate, FoodService, RoomId, EmployeeId, CustomerId) values (1, '10/31/2020', '11/10/2020', 'N', 3, 1, 4);
insert into [dbo].[Reservations] (ReservationId, CheckInDate, CheckOutDate, FoodService, RoomId, EmployeeId, CustomerId) values (2, '10/5/2020', '10/15/2020', 'N', 6, 1, 2);
insert into [dbo].[Reservations] (ReservationId, CheckInDate, CheckOutDate, FoodService, RoomId, EmployeeId, CustomerId) values (3, '8/21/2020', '8/31/2020', 'N', 9, 3, 1);
insert into [dbo].[Reservations] (ReservationId, CheckInDate, CheckOutDate, FoodService, RoomId, EmployeeId, CustomerId) values (4, '5/29/2020', '6/8/2020', 'Y', 10, 2, 6);
insert into [dbo].[Reservations] (ReservationId, CheckInDate, CheckOutDate, FoodService, RoomId, EmployeeId, CustomerId) values (5, '3/18/2020', '3/28/2020', 'N', 2, 3, 7);
SET IDENTITY_INSERT [dbo].[Reservations] OFF
GO



GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
